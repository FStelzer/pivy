diff -u libressl/crypto/x509/x509_alt.c libressl/crypto/x509/x509_alt.c
--- libressl/crypto/x509/x509_alt.c
+++ libressl/crypto/x509/x509_alt.c
@@ -619,6 +619,8 @@ v2i_GENERAL_NAME_ex(GENERAL_NAME *out, const X509V3_EXT_METHOD *method,
 	GENERAL_NAME *ret;
 	size_t len = 0;
 	int type;
+	struct x509_constraints_name cname;
+	int errc = 0;
 
 	name = cnf->name;
 	value = cnf->value;
@@ -652,42 +654,47 @@ v2i_GENERAL_NAME_ex(GENERAL_NAME *out, const X509V3_EXT_METHOD *method,
 	if (ret == NULL)
 		return NULL;
 
-	/* Validate what we have for sanity */
 	type = x509_constraints_general_to_bytes(ret, &bytes, &len);
-	switch(type) {
-	case GEN_DNS:
-		if (!x509_constraints_valid_sandns(bytes, len)) {
-			X509V3error(X509V3_R_BAD_OBJECT);
-			ERR_asprintf_error_data("name=%s value='%s'", name, bytes);
-			goto err;
-		}
-		break;
-	case GEN_URI:
-		if (!x509_constraints_uri_host(bytes, len, NULL)) {
-			X509V3error(X509V3_R_BAD_OBJECT);
-			ERR_asprintf_error_data("name=%s value='%s'", name, bytes);
-			goto err;
-		}
-		break;
-	case GEN_EMAIL:
-		if (!x509_constraints_parse_mailbox(bytes, len, NULL)) {
-			X509V3error(X509V3_R_BAD_OBJECT);
-			ERR_asprintf_error_data("name=%s value='%s'", name, bytes);
-			goto err;
-		}
-		break;
-	case GEN_IPADD:
-		if ((!is_nc && len != 4 && len != 16) ||
-		    (is_nc && len != 8 && len != 32)) {
-			X509V3error(X509V3_R_BAD_IP_ADDRESS);
-			ERR_asprintf_error_data("name=%s len=%zu", name, len);
-			goto err;
+
+	/* Validate what we have for sanity */
+	if (!is_nc) {
+		switch (type) {
+		case GEN_DNS:
+			if (!x509_constraints_valid_sandns(bytes, len))
+				goto badobject;
+			break;
+		case GEN_URI:
+			if (!x509_constraints_uri_host(bytes, len, NULL))
+				goto badobject;
+			break;
+		case GEN_EMAIL:
+			if (!x509_constraints_parse_mailbox(bytes, len, NULL))
+				goto badobject;
+			break;
+		case GEN_IPADD:
+			if (len != 4 && len != 16) {
+				X509V3error(X509V3_R_BAD_IP_ADDRESS);
+				ERR_asprintf_error_data("name=%s len=%zu", name, len);
+				goto err;
+			}
+			break;
+		default:
+			break;
 		}
-		break;
-	default:
-		break;
+	} else {
+		/* We're parsing a nameConstraints entry. */
+		bzero(&cname, sizeof (cname));
+		type = x509_constraints_validate(ret, &cname, &errc);
+		if (type == 0 || errc != 0)
+			goto badobject;
+		x509_constraints_name_clear(&cname);
 	}
 	return ret;
+
+ badobject:
+	X509V3error(X509V3_R_BAD_OBJECT);
+	ERR_asprintf_error_data("name=%s value='%s'", name, bytes);
+
  err:
 	if (out == NULL)
 		GENERAL_NAME_free(ret);
diff -u libressl/crypto/x509/x509_constraints.c libressl/crypto/x509/x509_constraints.c
--- libressl/crypto/x509/x509_constraints.c
+++ libressl/crypto/x509/x509_constraints.c
@@ -636,7 +636,11 @@ int
 x509_constraints_dirname(uint8_t *dirname, size_t dlen,
     uint8_t *constraint, size_t len)
 {
-	if (len != dlen)
+	/*
+	 * Allow constraint shorter than name to check (it has to be a prefix
+	 * of it in DER format).
+	 */
+	if (len > dlen)
 		return 0;
 	return (memcmp(constraint, dirname, len) == 0);
 }
@@ -922,19 +926,40 @@ x509_constraints_validate(GENERAL_NAME *constraint,
 		name->type = GEN_DNS;
 		break;
 	case GEN_EMAIL:
-		if (memchr(bytes, '@', len) != NULL) {
+		if (bytes[0] == '@') {
+			/*
+			 * Allow email constraints of the form "@domain.com":
+			 * treat them as if they just said "domain.com".
+			 *
+			 * This is not in the RFC, but is allowed by both
+			 * OpenSSL upstream and Microsoft's X.509 bits.
+			 */
+			if (!x509_constraints_valid_domain_constraint(bytes + 1,
+			    len - 1))
+				goto err;
+			name->local = NULL;
+			name->name = strdup(bytes + 1);
+			name->type = GEN_EMAIL;
+
+		} else if (memchr(bytes, '@', len) != NULL) {
+			/* Specific email address (no suffix match) */
 			if (!x509_constraints_parse_mailbox(bytes, len, name))
 				goto err;
+			name->type = GEN_EMAIL;
+
 		} else {
+			/* Just a domain name. */
 			if (!x509_constraints_valid_domain_constraint(bytes,
 			    len))
 				goto err;
-			if ((name->name = strdup(bytes)) == NULL) {
-				*error = X509_V_ERR_OUT_OF_MEM;
-				return 0;
-			}
+			name->local = NULL;
+			name->name = strdup(bytes);
+			name->type = GEN_EMAIL;
+		}
+		if (name->name == NULL) {
+			*error = X509_V_ERR_OUT_OF_MEM;
+			return 0;
 		}
-		name->type = GEN_EMAIL;
 		break;
 	case GEN_IPADD:
 		/* Constraints are ip then mask */
@@ -951,6 +976,10 @@ x509_constraints_validate(GENERAL_NAME *constraint,
 		if (!x509_constraints_valid_domain_constraint(bytes, len))
 			goto err;
 		name->name = strdup(bytes);
+		if (name->name == NULL) {
+			*error = X509_V_ERR_OUT_OF_MEM;
+			return 0;
+		}
 		name->type = GEN_URI;
 		break;
 	default:
diff -u libressl/crypto/x509/x509_internal.h libressl/crypto/x509/x509_internal.h
--- libressl/crypto/x509/x509_internal.h
+++ libressl/crypto/x509/x509_internal.h
@@ -126,6 +126,8 @@ int x509_constraints_extract_names(struct x509_constraints_names *names,
 int x509_constraints_extract_constraints(X509 *cert,
     struct x509_constraints_names *permitted,
     struct x509_constraints_names *excluded, int *error);
+int x509_constraints_validate(GENERAL_NAME *constraint,
+    struct x509_constraints_name *name, int *error);
 int x509_constraints_check(struct x509_constraints_names *names,
     struct x509_constraints_names *permitted,
     struct x509_constraints_names *excluded, int *error);
