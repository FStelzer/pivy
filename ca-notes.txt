CA structure



  /
  --> pivy-ca.json          marker and main config
  					signed with CA key for modification detect
  --> ${CN}.crt			        main CA cert
  --> ${CN}.serial.ebox		  next cert serial
  					mirrored in printed info file on card
  --> ${CN}.seqbase.ebox	  base of serial sequence for verifying
  --> ${CN}.pin.ebox		    CA card PIN
  --> ${CN}.key.ebox		    key backup
  --> token/
      --> ${GUID}.json			piv token info, state (revoked?)
      --> ${GUID}-puk.ebox
      --> ${GUID}-admin.ebox		admin key (if enabled, otherwise in pinfo)
      --> ${GUID}-${SLOT}-attest.crt	attestation cert (if available)
      --> ${GUID}-${SLOT}.crt
  --> intermediate/
      --> ${CN}.json			state (revoked?)
      --> ${CN}.req
      --> ${CN}.crt
  --> other/
      --> ${CN}.json			state (revoked?)
      --> ${CN}.req
      --> ${CN}.crt
  --> crl/
      --> ${FROMDATE}-${TODATE}.crl


pivy-ca setup			interactive setup of a new CA
piva-ca config			edits and re-signs configuration

pivy-ca shell			unlocks CA PIN and enters a shell with an agent running for it

pivy-ca restore			restores CA to new card from backup

pivy-ca provision		provisions a new PIV card/token for a user

pivy-ca revoke			revokes a card/token and all its certs

pivy-ca sign-req		signs a manual certificate req, incl. for intermediate

pivy-ca crl			signs a new CRL (after verifying all certs are present in state dir)
